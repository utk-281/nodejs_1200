{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "GGF_QkGLadTES92ptVWql",
      "type": "text",
      "x": 280.8887939453125,
      "y": 183.66671752929688,
      "width": 1914.0477294921875,
      "height": 1755,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 1891006584,
      "version": 236,
      "versionNonce": 1738654328,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1753071838763,
      "link": null,
      "locked": false,
      "text": "1) What is Node.js, and what JavaScript runtime does it use?\n\n2) What is the difference between user-defined modules and built-in modules in Node.js? Give an \n    example of each.\n\n3) Write a simple script using the fs module’s synchronous method readFileSync to read a file and log\n   its contents.\n\n4) What is the role of the event loop in Node.js?\n\n5) How does the callback queue interact with the event loop in asynchronous operations?\n\n6) Create a function that uses fs.readFileSync to read two files sequentially, concatenate their contents, \n   and write the result to a new file using fs.writeFileSync.\n\n7) What is the difference between require() (CommonJS) and import (ESM) for including modules in Node.js?\n\n8) How would you handle errors in synchronous fs operations (e.g., readFileSync) without crashing the \n    Node.js process?\n\n9) Create a Node.js script that uses the built-in fs module to:\n\n                                            // Hardcoded values\n                                            const a = 10;\n                                            const b = 5;\n\n  --> Perform arithmetic operations (add, subtract, multiply, divide) on two hardcoded values (e.g., 10 and 5).\n  --> Write the results of all four operations to a file named results.txt synchronously.\n  --> Handle division by zero errors (even though inputs are hardcoded).\n\n                                    Format the file content as:\n                                    Addition: 15\n                                    Subtraction: 5\n                                    Multiplication: 50\n                                    Division: 2\n\nNOTE: If division by zero occurs, write Division: Error: Division by zero.\n\n",
      "fontSize": 36,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1) What is Node.js, and what JavaScript runtime does it use?\n\n2) What is the difference between user-defined modules and built-in modules in Node.js? Give an \n    example of each.\n\n3) Write a simple script using the fs module’s synchronous method readFileSync to read a file and log\n   its contents.\n\n4) What is the role of the event loop in Node.js?\n\n5) How does the callback queue interact with the event loop in asynchronous operations?\n\n6) Create a function that uses fs.readFileSync to read two files sequentially, concatenate their contents, \n   and write the result to a new file using fs.writeFileSync.\n\n7) What is the difference between require() (CommonJS) and import (ESM) for including modules in Node.js?\n\n8) How would you handle errors in synchronous fs operations (e.g., readFileSync) without crashing the \n    Node.js process?\n\n9) Create a Node.js script that uses the built-in fs module to:\n\n                                            // Hardcoded values\n                                            const a = 10;\n                                            const b = 5;\n\n  --> Perform arithmetic operations (add, subtract, multiply, divide) on two hardcoded values (e.g., 10 and 5).\n  --> Write the results of all four operations to a file named results.txt synchronously.\n  --> Handle division by zero errors (even though inputs are hardcoded).\n\n                                    Format the file content as:\n                                    Addition: 15\n                                    Subtraction: 5\n                                    Multiplication: 50\n                                    Division: 2\n\nNOTE: If division by zero occurs, write Division: Error: Division by zero.\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "NiYFFaFt6q_lFMAQybZbd",
      "type": "text",
      "x": 910,
      "y": 76.77782864040802,
      "width": 486.3463847294451,
      "height": 92.11111450195311,
      "angle": 0,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a3",
      "roundness": null,
      "seed": 1262892408,
      "version": 96,
      "versionNonce": 1225791864,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1753071872857,
      "link": null,
      "locked": false,
      "text": "ASSESSMENT-1",
      "fontSize": 73.6888916015625,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "ASSESSMENT-1",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "i6XjQ8nY1JLrJSyQFPgHY",
      "type": "text",
      "x": 858.7204591034808,
      "y": 2006.6741423862654,
      "width": 486.287841796875,
      "height": 92.11111450195312,
      "angle": 0,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a4",
      "roundness": null,
      "seed": 1590021951,
      "version": 197,
      "versionNonce": 599679857,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754972379272,
      "link": null,
      "locked": false,
      "text": "ASSESSMENT-2",
      "fontSize": 73.6888916015625,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "ASSESSMENT-2",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "utI-ak1QVCTTqnlPY4Yeq",
      "type": "text",
      "x": 89.93291804575335,
      "y": 2116.660272393764,
      "width": 2061.0712890625,
      "height": 990,
      "angle": 0,
      "strokeColor": "#9c36b5",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a6",
      "roundness": null,
      "seed": 877637887,
      "version": 305,
      "versionNonce": 1786905471,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754972729767,
      "link": null,
      "locked": false,
      "text": "1) Using only Node.js core modules (no Express or other frameworks), implement an HTTP server that listens on \n    a port and responds differently based on the requested route. \n\n    Specifically:\n        --> GET /home should return a simple HTML welcome page.\n        --> GET /about should return an HTML page describing the application or author.\n        --> GET /api/users should return a JSON array of user objects.\n        --> Make sure you set appropriate HTTP status codes and Content-Type headers for HTML and \n            JSON responses. Your server should handle unknown routes with a 404 response.\n\n\n\n2) Build a REST API using Express.js that allows new users to register and stores their information in a MongoDB \n    database. \n\n    The API should have:\n        --> A POST /register endpoint that accepts name, email, and password in JSON format.\n        --> Body parsing middleware to handle JSON request bodies.\n        --> MongoDB integration using Mongoose with a User model containing the given fields.\n        --> Proper success and error responses.\n        --> Assume the database connection string is provided. Your implementation should include schema definition, \n            connection handling, and route setup. Use proper MVC structure.",
      "fontSize": 36,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1) Using only Node.js core modules (no Express or other frameworks), implement an HTTP server that listens on \n    a port and responds differently based on the requested route. \n\n    Specifically:\n        --> GET /home should return a simple HTML welcome page.\n        --> GET /about should return an HTML page describing the application or author.\n        --> GET /api/users should return a JSON array of user objects.\n        --> Make sure you set appropriate HTTP status codes and Content-Type headers for HTML and \n            JSON responses. Your server should handle unknown routes with a 404 response.\n\n\n\n2) Build a REST API using Express.js that allows new users to register and stores their information in a MongoDB \n    database. \n\n    The API should have:\n        --> A POST /register endpoint that accepts name, email, and password in JSON format.\n        --> Body parsing middleware to handle JSON request bodies.\n        --> MongoDB integration using Mongoose with a User model containing the given fields.\n        --> Proper success and error responses.\n        --> Assume the database connection string is provided. Your implementation should include schema definition, \n            connection handling, and route setup. Use proper MVC structure.",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}